plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 33
    ndkVersion "21.4.7075529"

    defaultConfig {
        applicationId "com.example.rustapplication"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64' // add this line
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.compose.ui:ui:1.3.3"
    implementation "androidx.compose.material:material:1.3.1"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.3"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.3.3"
    debugImplementation "androidx.compose.ui:ui-tooling:1.3.3"
}

// rustup target add aarch64-linux-android armv7-linux-androideabi
def rustBasePath = "../rust_lib"
def archTriplets = [
        'armeabi-v7a': 'armv7-linux-androideabi',
        'arm64-v8a': 'aarch64-linux-android',
]
import org.gradle.internal.os.OperatingSystem
OperatingSystem os = OperatingSystem.current()
String host
if (os.familyName == "linux") {
    host = "linux-x86_64"
} else if (os.familyName == "os x") {
    host = "darwin-x86_64"
} else if (os.familyName == "windows") {
    host = "windows-x86_64"
} else {
    throw IllegalStateException("Unknown OS (${os.familyName})")
}
def ndkApi = 28
def ndkLlvmBin = "${android.ndkDirectory.path}/toolchains/llvm/prebuilt/$host/bin/"

// arm ar's prefix starts with 'arm', not 'armv7'
// arm linker's prefix starts with 'armv7a', not 'armv7'
def libConfigDir = "$projectDir/$rustBasePath/.cargo/"
new File(libConfigDir).mkdirs()
new File("$libConfigDir/config.toml").write("""
# DONT EDIT! Genereted by $projectDir/build.gradle

[target.aarch64-linux-android]
ar = \"${ndkLlvmBin}aarch64-linux-android-ar\"
linker = \"${ndkLlvmBin}aarch64-linux-android$ndkApi-clang\"

[target.armv7-linux-androideabi]
ar = \"${ndkLlvmBin}arm-linux-androideabi-ar\"
linker = \"${ndkLlvmBin}armv7a-linux-androideabi$ndkApi-clang\"
""")

archTriplets.each { arch, target ->
    project.ext.cargo_target_directory = rustBasePath + "/target"
    // Build with cargo
    tasks.create(name: "cargo-build-${arch}", type: Exec, description: "Building core for ${arch}") {
        workingDir rustBasePath
        commandLine 'cargo', 'build', "--target=${target}", '--release'
    }
    // Sync shared native dependencies
    tasks.create(name: "sync-rust-deps-${arch}", type: Sync, dependsOn: "cargo-build-${arch}") {
        from "${rustBasePath}/src/libs/${arch}"
        include "*.so"
        into "src/main/libs/${arch}"
    }
    // Copy build libs into this app's libs directory
    tasks.create(name: "rust-deploy-${arch}", type: Copy, dependsOn: "sync-rust-deps-${arch}", description: "Copy rust libs for (${arch}) to jniLibs") {
        from "${project.ext.cargo_target_directory}/${target}/release"
        include "*.so"
        into "src/main/libs/${arch}"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "rust-deploy-${arch}"
    }
    preBuild.dependsOn "rust-deploy-${arch}"

    // Hook up clean tasks
    tasks.create(name: "clean-${arch}", type: Delete, description: "Deleting built libs for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        delete fileTree("${project.ext.cargo_target_directory}/${target}/release") {
            include '*.so'
        }
    }

    clean.dependsOn "clean-${arch}"
}